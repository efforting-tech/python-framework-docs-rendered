Type System
===========

.. include:: /common/roles.inc

.. toctree::

	ts-state-management

Earlier work
------------


Member classes
^^^^^^^^^^^^^^

In earlier work the author explored various ways of defining the various components of a type system. One of these components of course is a member of a class. Initially this was classified in a few classes. The definitions of these classes were not completely clear so this will be a bit vauge and only serve to highlight some of the thoughts behind them.

- configuration
	Data that is set on the class rather than the instance. This data could be updated when subclassing or even mutated, such as a list where each subclass add to the list. There are open questions here, such as, should this data be overridable on the instance? Could this be a setting in itself?
- public data
	These members would operate the way you normally think of members. They may be set by the constructor, a factory function or a default value. They are mutable and considered part of the instances state.
- state
	These are members that may or may not be present. They will be used to hold temporary states when performing some operation. Since they are part of the state they should be saved and restored during serialization.
- transient
	Transient members are members that could be present but doesn't have to be saved when serializing the data. This would typically be used for caching purposes.

Member templates
^^^^^^^^^^^^^^^^
In this earlier work there were also some member templates that were commonly used.

- member
	The basic member (puiblic data), typically also either defining a default value or a factory function. Note that when it comes to factory functions there are a few different APIs possible and a decision have to be made which ones to support and how to select which one to use.
- named
	Basic member that stores all the remaining named arguments, such as :python:`ùëì(**named)`.
- positional
	Basic member that stores all the remaining positional arguments, such as :python:`ùëì(*positional)`.
- keyword_only
	Basic member that is keyword only such as :python:`ùëì(..., *, keyword_only)`.
- arguments
	Basic member that stores all remaining positional and named arguments such as :python:`ùëì(*pos, **named)` ‚Üí :python:`arguments(pos, named)`.
- state
	This was supposed to either be a base class of members for inclusion in :python:`__getstate__()` or just a member that did not consume any positional or named argument. It is currently unclear if this was ever used.
- config
	This is a configuration value so this is initialized during subclassing rather than instantiation.
- transient
	The base member of transient members.
- cached(transient)
	The cache will call the factory function and then update the instance so it will only be called once. Do invalidate a cache the attribute has to be erased from the instance. This can be done automatically with a member configuration for cache invalidation. This still needs further work to consider all the angles.
- subclass_initializer
	A function to be called during subclass initialization.
- instance_initializer
	A function to be called during instance initialization.
- member_operation
	Base member for specific operations on members during subclassing.
- update_member(member_operation)
	Creates a new copy of the original member value and then merges that new value with the current one.
- replace_member(member_operation)
	Replaces the current member with the new one.

Property templates
^^^^^^^^^^^^^^^^^^

- base_property
	Base for all properties
- property(base_property)
	This will act as a property that evaluates some function each call
- cached_property(base_property)
	Not sure if this was ever used since this would be similar functionality as `cached(transient)`.


Member properties
^^^^^^^^^^^^^^^^^


.. py:module:: archive.type_system_member

.. py:class:: base_member

.. py:class:: member

	Bases: :class:`base_member`

	.. rubric:: Parameter consumption during construction

	.. py:data:: positional
		:value: True

		Determines if this member should consume a positional argument during initialization.

	.. py:data:: named
		:value: True

		Determines if this member should consume a named argument during initialization.

	.. py:data:: remaining_positional
		:value: False

		Determines if this member should consume all remaining positional arguments as a sequence during initialization.

	.. py:data:: remaining_named
		:value: False

		Determines if this member should consume all remaining named arguments as a mapping during initialization.

	.. note::

		Since members can be initialized in different situations, maybe it should be made more clear when the various parameter consumptions should happen. Also note that the previous work is only meant as an inspiration and not a specification.


	.. rubric:: Initialization options

	.. py:data:: init_during_subclassing
		:value: False

		Determines if this member should be initialized during subclassing or not (__init_subclass__).

	.. py:data:: init_during_instantiation
		:value: True

		Determines if this member should be initialized during instantiation or not (__init__).

	.. rubric:: Member data initialization

	.. py:data:: default
		:value: UNDEFINED

		Sets an initial value during initialization.

	.. py:data:: factory
		:value: None

		Sets a factory to be used to set the value during initialization.

		.. note::

			Factories could potentially be called in a few different ways such as

			- :python:`factory()`
			- :python:`factory(instance)`
			- :python:`factory(member)`
			- :python:`factory(instance, member)`
			- ...

			There need to be a reasonable way to select which one to use. Potentially this could be done using configuration profiles. Once the documents discussing those are made they will be included as references here.

		..
			TODO: Document the earlier work for configuration profiles


	.. rubric:: Member metadata

	.. py:data:: name
		:value: None

		The name of the member.

		.. note::

			Typically this will be set in the __set_name__ handler.

	.. py:data:: description
		:value: None

		A description of the member, mainly used for documentation.


	.. rubric:: Caching

	.. py:data:: invalidate_caches
		:value: None

		Could specify as sequence of member names that should be invalidated when this member is set.

		.. note::

			There needs to be more thought put into the caching system because there are some caveats such as modifying a field of an item which would not trigger the invalidation.

	.. rubric:: Filtering

	.. py:data:: assignment_filter
		:value: None

		Filters the data that is being set during assignment.

		.. note::

			Filters could potentially be called in a few different ways such as

			- :python:`filter(value)`
			- :python:`filter(instance, value)`
			- :python:`filter(instance, member, value)`
			- :python:`filter(member, value)`
			- ...

			There need to be a reasonable way to select which one to use. Potentially this could be done using configuration profiles. Once the documents discussing those are made they will be included as references here.

		..
			TODO: Document the earlier work for configuration profiles


	.. rubric:: Type management

	.. py:data:: type
		:value: UNDEFINED

		Sets what type this member should have data of.

		.. note::

			If auto_cast is set and type is not, then type will be set to auto_cast.

	.. py:data:: auto_cast
		:value: None

		Sets a type to automatically run assignment data through. Will also update type if type is not set.

		.. note::

			If auto_cast is set to True then type must be explicitly set.


	.. rubric:: Automatic assignments

	.. py:data:: assign_self
		:value: None

		This is used when this member is being assigned some data. The member indicated by assign_self of the data will be set to the current instance. This is useful to automatically set an owner or other relation automatically.

	.. py:data:: assign_class
		:value: None

		This is used when this member is being assigned some data. The member indicated by assign_class of the data will be set to the current class. This is useful to automatically set some relation.




